/* tslint:disable */
/* eslint-disable */
/**
 * proto/satellite/v1/satellite.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface ProtobufAny
 */
export interface ProtobufAny {
    [key: string]: object | any;

    /**
     * 
     * @type {string}
     * @memberof ProtobufAny
     */
    '@type'?: string;
}
/**
 * 
 * @export
 * @interface RpcStatus
 */
export interface RpcStatus {
    /**
     * 
     * @type {number}
     * @memberof RpcStatus
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof RpcStatus
     */
    'message'?: string;
    /**
     * 
     * @type {Array<ProtobufAny>}
     * @memberof RpcStatus
     */
    'details'?: Array<ProtobufAny>;
}
/**
 * 
 * @export
 * @interface V1GetSatelliteGroupsResponse
 */
export interface V1GetSatelliteGroupsResponse {
    /**
     * 
     * @type {Array<string>}
     * @memberof V1GetSatelliteGroupsResponse
     */
    'groups'?: Array<string>;
}
/**
 * 
 * @export
 * @interface V1GetSatellitePositionsResponse
 */
export interface V1GetSatellitePositionsResponse {
    /**
     * 
     * @type {Array<V1Satellite>}
     * @memberof V1GetSatellitePositionsResponse
     */
    'satellites'?: Array<V1Satellite>;
}
/**
 * 
 * @export
 * @interface V1Satellite
 */
export interface V1Satellite {
    /**
     * 
     * @type {string}
     * @memberof V1Satellite
     */
    'id'?: string;
    /**
     * 
     * @type {number}
     * @memberof V1Satellite
     */
    'lat'?: number;
    /**
     * 
     * @type {number}
     * @memberof V1Satellite
     */
    'lon'?: number;
    /**
     * 
     * @type {number}
     * @memberof V1Satellite
     */
    'altitude'?: number;
    /**
     * 
     * @type {number}
     * @memberof V1Satellite
     */
    'velocity'?: number;
    /**
     * 
     * @type {string}
     * @memberof V1Satellite
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface V1SatelliteDetail
 */
export interface V1SatelliteDetail {
    /**
     * 
     * @type {string}
     * @memberof V1SatelliteDetail
     */
    'ccsdsOmmVers'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1SatelliteDetail
     */
    'comment'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1SatelliteDetail
     */
    'creationDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1SatelliteDetail
     */
    'originator'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1SatelliteDetail
     */
    'objectName'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1SatelliteDetail
     */
    'objectId'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1SatelliteDetail
     */
    'centerName'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1SatelliteDetail
     */
    'refFrame'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1SatelliteDetail
     */
    'timeSystem'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1SatelliteDetail
     */
    'meanElementTheory'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1SatelliteDetail
     */
    'epoch'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1SatelliteDetail
     */
    'meanMotion'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1SatelliteDetail
     */
    'eccentricity'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1SatelliteDetail
     */
    'inclination'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1SatelliteDetail
     */
    'raOfAscNode'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1SatelliteDetail
     */
    'argOfPericenter'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1SatelliteDetail
     */
    'meanAnomaly'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1SatelliteDetail
     */
    'ephemerisType'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1SatelliteDetail
     */
    'classificationType'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1SatelliteDetail
     */
    'noradCatId'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1SatelliteDetail
     */
    'elementSetNo'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1SatelliteDetail
     */
    'revAtEpoch'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1SatelliteDetail
     */
    'bstar'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1SatelliteDetail
     */
    'meanMotionDot'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1SatelliteDetail
     */
    'meanMotionDdot'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1SatelliteDetail
     */
    'semimajorAxis'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1SatelliteDetail
     */
    'period'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1SatelliteDetail
     */
    'apoapsis'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1SatelliteDetail
     */
    'periapsis'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1SatelliteDetail
     */
    'objectType'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1SatelliteDetail
     */
    'rcsSize'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1SatelliteDetail
     */
    'countryCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1SatelliteDetail
     */
    'launchDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1SatelliteDetail
     */
    'site'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1SatelliteDetail
     */
    'decayDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1SatelliteDetail
     */
    'file'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1SatelliteDetail
     */
    'gpId'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1SatelliteDetail
     */
    'tleLine0'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1SatelliteDetail
     */
    'tleLine1'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1SatelliteDetail
     */
    'tleLine2'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof V1SatelliteDetail
     */
    'groups'?: Array<string>;
}

/**
 * SatelliteServiceApi - axios parameter creator
 * @export
 */
export const SatelliteServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        satelliteServiceGetSatelliteDetail: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('satelliteServiceGetSatelliteDetail', 'id', id)
            const localVarPath = `/v1/satellite/detail/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        satelliteServiceGetSatelliteGroups: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/satellite/groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [time] 
         * @param {Array<string>} [groups] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        satelliteServiceGetSatellitePositions: async (time?: string, groups?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/satellite/positions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (time !== undefined) {
                localVarQueryParameter['time'] = (time as any instanceof Date) ?
                    (time as any).toISOString() :
                    time;
            }

            if (groups) {
                localVarQueryParameter['groups'] = groups;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SatelliteServiceApi - functional programming interface
 * @export
 */
export const SatelliteServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SatelliteServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async satelliteServiceGetSatelliteDetail(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1SatelliteDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.satelliteServiceGetSatelliteDetail(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SatelliteServiceApi.satelliteServiceGetSatelliteDetail']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async satelliteServiceGetSatelliteGroups(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1GetSatelliteGroupsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.satelliteServiceGetSatelliteGroups(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SatelliteServiceApi.satelliteServiceGetSatelliteGroups']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [time] 
         * @param {Array<string>} [groups] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async satelliteServiceGetSatellitePositions(time?: string, groups?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1GetSatellitePositionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.satelliteServiceGetSatellitePositions(time, groups, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SatelliteServiceApi.satelliteServiceGetSatellitePositions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SatelliteServiceApi - factory interface
 * @export
 */
export const SatelliteServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SatelliteServiceApiFp(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        satelliteServiceGetSatelliteDetail(id: string, options?: any): AxiosPromise<V1SatelliteDetail> {
            return localVarFp.satelliteServiceGetSatelliteDetail(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        satelliteServiceGetSatelliteGroups(options?: any): AxiosPromise<V1GetSatelliteGroupsResponse> {
            return localVarFp.satelliteServiceGetSatelliteGroups(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [time] 
         * @param {Array<string>} [groups] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        satelliteServiceGetSatellitePositions(time?: string, groups?: Array<string>, options?: any): AxiosPromise<V1GetSatellitePositionsResponse> {
            return localVarFp.satelliteServiceGetSatellitePositions(time, groups, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SatelliteServiceApi - object-oriented interface
 * @export
 * @class SatelliteServiceApi
 * @extends {BaseAPI}
 */
export class SatelliteServiceApi extends BaseAPI {
    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SatelliteServiceApi
     */
    public satelliteServiceGetSatelliteDetail(id: string, options?: RawAxiosRequestConfig) {
        return SatelliteServiceApiFp(this.configuration).satelliteServiceGetSatelliteDetail(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SatelliteServiceApi
     */
    public satelliteServiceGetSatelliteGroups(options?: RawAxiosRequestConfig) {
        return SatelliteServiceApiFp(this.configuration).satelliteServiceGetSatelliteGroups(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [time] 
     * @param {Array<string>} [groups] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SatelliteServiceApi
     */
    public satelliteServiceGetSatellitePositions(time?: string, groups?: Array<string>, options?: RawAxiosRequestConfig) {
        return SatelliteServiceApiFp(this.configuration).satelliteServiceGetSatellitePositions(time, groups, options).then((request) => request(this.axios, this.basePath));
    }
}



